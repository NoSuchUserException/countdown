<!DOCTYPE html>
<!-- saved from url=(0045)http://etarim-cs410-winona.mybluemix.net/SRS/ -->
<html><head><meta http-equiv="Content-Type" content="text/html; charset=UTF-8">
	<title>SRS for Team Etarium</title>
	
	<link rel="stylesheet" href="./SRS for Team Etarium_files/style.css">
</head>
<body>
<h1>SRS for Team Etarium</h1>
<hr>
<h2>Table of Contents</h2>
<ul>
<li><a href="http://etarim-cs410-winona.mybluemix.net/SRS/#Preface">Preface</a></li> 
<li><a href="http://etarim-cs410-winona.mybluemix.net/SRS/#Introduction">Introduction</a></li> 
<li><a href="http://etarim-cs410-winona.mybluemix.net/SRS/#Glossary">Glossary</a></li> 
<li><a href="http://etarim-cs410-winona.mybluemix.net/SRS/#UserRequirements">User Requirements</a></li> 
<li><a href="http://etarim-cs410-winona.mybluemix.net/SRS/#SystemArchitecture">System Architecture</a></li> 
<li><a href="http://etarim-cs410-winona.mybluemix.net/SRS/#SystemRequirements">System Requirements</a></li> 
<li><a href="http://etarim-cs410-winona.mybluemix.net/SRS/#SystemModels">System Models</a></li> 
<li><a href="http://etarim-cs410-winona.mybluemix.net/SRS/#SystemEvolution">System Evolution</a></li> 
<li><a href="http://etarim-cs410-winona.mybluemix.net/SRS/#Appendices">Appendices</a></li> 
<li><a href="http://etarim-cs410-winona.mybluemix.net/SRS/#Index">Index</a></li> 
<li><a href="http://etarim-cs410-winona.mybluemix.net/SRS/#ContributionsSummary">Contributions Summary</a></li> 
<li><a href="http://etarim-cs410-winona.mybluemix.net/SRS/#AcceptanceParagraph">Acceptance Paragraph</a></li> 
<li><a href="http://etarim-cs410-winona.mybluemix.net/SRS/#DesignAssignments">Design Assignments</a></li> 

</ul>


<hr>
<h2 id="Preface">Software Requirements Specifications</h2>
<h3>for</h3>
<h1> The Twisting Haunt</h1>

<p>January 31, 2018</p>
<p>Developed by Team Etarium: Sam Fiscus, Emily Clark, Ben Bolin, and Jason Richter</p>
<h2>Revision History</h2>
<table>
  <tbody><tr>
    <th>Name</th>
    <th>Date</th>
    <th>Change Summary</th>
    <th>Version</th>
  </tr>
  <tr>
    <td>Ben Bolin</td>
    <td>January 31, 2018</td>
    <td>Initial Draft</td>
    <td>Version 1.0 (draft)</td>
  </tr>
  </tbody></table>
 <p> This SRS (Software Requirement Specification) defines the requirements for Twisted Haunt Game. This includes how the user will interact with the game, what environment the user will play this game in and what the game will be designed to do. 
The Twisting Haunt is intended to be fun and will guide a player through levels doing various missions and quests in a text based environment. </p> <hr>
<h2 id="Introduction">Introduction</h2>
<p>This SRS (Software Requirements Specification) defines the requirements for the <b>The Twisting Haunt</b>. 
We are building a text based role playing game that will open in its own window. 
The game will be controlled by menu commands in text based environment. It will 
use the Lightweight Java Game Library. The game utilizes a database system 
that holds player items and other objects.  There is a combat system that incorporates a simple AI. 
The characters have different class types and attributes to create battle systems 
with additional challenges. </p>
<hr>
<h3 id="Glossary">Glossary</h3>
<p> In this section, define terms used in the SRS.</p>
<table border="1">
  <tbody><tr>
    <th>Term</th>
    <th>Definition</th>
  </tr>
  <tr>
    <td>Aggressive</td>
    <td>A value for a NPC. This means the NPC will generate an encounter with the character.</td>
   </tr>
  <tr>
    <td>Bag</td>
    <td>The character will be capable of possessing items. This is where the items will be stored. It may be given multiple names, including ‘bag’, ‘equipable items’, ‘inventory’, etc. </td>
  </tr>
  <tr>
  	<td>Battle</td>
  	<td>These can occur between the character and NPCs. They are required for story progression. May also be referred to as 'encounter'.</td>
  </tr>
  <tr>
    <td>Boss</td>
    <td>A ‘NPC’ that will typically be more difficult in battle sequences. Defeating them will progress story.</td>
  </tr>
  <tr>
    <td>Cells</td>
    <td>Used to describe location on a map and contains objects including NPCs, Key Items, etc.</td>
  </tr>
  <tr>
    <td>Character</td>
    <td>The generated symbol within the game that interacts with the other objects within the game.</td>
  </tr>
  <tr>
    <td>Command</td>
    <td>A player will use these to control their character. They are text based and require keyboard entry.</td>
  </tr>
  <tr>
  	<td>Encounter</td>
  	<td>See battle. These may be used interchangeably within the requirements as their differences are semantic.</td>
  </tr>
  <tr>
    <td>Equip</td>
    <td>The character can determine that some objects are active and can be used in relation to battle sequences.</td>
  </tr>
  <tr>
    <td>Equipable Items</td>
    <td>See bag. Additionally, these items have properties that allow them to be marked as active and can be used in relation to battle sequences.</td>
  </tr>
  <tr>
    <td>Friendly</td>
    <td>A value for a NPC. This means the NPC will communicate with the character. Typically for quests.</td>
  </tr>
  <tr>
    <td>HP</td>
    <td>“Health Points”. This is how the battle system will calculate damage and wins/losses.</td>
  </tr>
  <tr>
    <td>Key Item</td>
    <td>These are objects that will exist within the game that are required for story progression.</td>
  </tr>
  <tr>
    <td>Inventory</td>
    <td>See bag. These may be used interchangeably within the requirements as their differences are semantic.</td>
  </tr>
  <tr>
    <td>Map</td>
    <td>An object that will be displayed in-game for the player to reference when making decisions for the character. It will show locations and may show other information pertinent to location-specific activities.</td>
  </tr>
  <tr>
    <td>MP</td>
    <td>“Magic (alternatively ‘Mana’) Points”. This is how the battle system will determine if a character can use special skills.</td>
  </tr><tr>
    <td>NPC</td>
    <td>Literally “Non-player Character”. This is an object with similar attributes to the character however is controlled via the program. Actions are often taken by the player to manipulate NPCs.</td>
  </tr>
  <tr>
    <td>Player</td>
    <td>The user who is controlling the ‘character’ and making decisions within the game. Drives the progression of the story. (The game will not auto-play scenes or decisions.)</td>
  </tr>
  <tr>
    <td>Potion</td>
    <td>A type of object the character may possess. Potions will often have healing or damaging attributes.</td>
  </tr>
  <tr>
    <td>Quest</td>
    <td>A character may be tasked by a NPC to undergo a journey, obtain specific items, or defeat a boss. Completion of quests progresses the story.</td>
  </tr>
  <tr>
    <td>RPG</td>
    <td>Literally “Roleplaying Game”. A player controls a character and via the character completes objectives.</td>
  </tr>
  <tr>
    <td>Stats</td>
    <td>A character has these to determine different factors in battle sequences, including damage inflicted and damage received. Equipable items can alter these stats.</td>
 </tr>
</tbody></table><hr>
<h2 id="UserRequirements">User Requirements</h2>
<p>
    </p><ol type="1">
	<li>The user should be able to create a character of various stats.</li>
	<li>The user should be able to have the character travel across a grid like map.</li>
	<li>The user should be able to battle non-player characters. The user and non-player characters’ battle will be executed by a turn based and text based battle system. </li>
	<li>The user should be able to interact with the environment using commands.</li>
	<li>The user should be able to have and use items in their inventory.</li>
	<li>The user should be able to adjust the difficulty of the game.</li>
    <li>The user should have a help document with commands readily available.</li>
	<li>The user should be able to save to a local file during progression of the story. The user should be able to exit the game and have your game be saved, then come back and load the game and be able to start where they left off.</li>
	
	</ol> 
<hr>
<h2 id="SystemArchitecture">System Architecture</h2>
    <p>The system architecture follows a Model-View-Controller development protocol. In this system, the Server acts as the Model, the Windowed Java Application as the View, and the Client executable as the Controller. This is done in order to maintain modularity between separate systems, so that each piece is not fully dependant on the usage of another. This design was instituted to allow for greater modification throughout the design process, to eliminate dependencies, and to structure development among teams.</p>

<br>


<h3>Client</h3>
    <p>The package client will control the process flow between the server and the user interface. This will construct a windowed application, establish a database connection, input and output streams, and query execution.</p>
<h3>Server</h3>
    <p>The client will establish a connection with a remote server run through AWS in order to execute queries based off of an external database. The client will then serialize objects (e.g. save states) into an external database, which will be referenced for reading and overwriting through queries to the database.</p>
<blockquote>
    <h4>Database</h4>
    <blockquote>
        <li>Developed and maintained within MySQL Constraints.</li>
        <li>Largely queried in read contexts. The game information should not be overwritten in the event of  state changes (e.g. defeating an enemy combatant), so the already defined records will be loaded into the client for execution.</li>
        <li>Organized according to overarching room tiles. From an object-oriented standpoint, each room can aggregreate combat encounters consisting of entities, who in turn will have items, abilities, formulaic statistics, etc. Furthermore, each room room will contain associated descriptive text to be output to the user.</li>
        <li>The tables of the database will be normalized to Third Normal Form in order to maintain object relations.</li>
        <li>The client will execute prepared queries on the database in order to populate the windowed application with display content.</li>
    </blockquote>
    
    <h4>Directory</h4>
    <blockquote>
        <li>The client will have the ability to save and load serialized objects (e.g. Save States) into a multi-layered directory located on the server.</li>
        <li>The Database will contain the references to these objects in order to form relational connections.</li>
        <li>The directory would best be utilized to store predetermined static lists of objects that would be inefficient to repeatedly build through queries. An example of this would be a list of starting items that a user may always begin play with.</li>
        <li>This could integrate with the client in order to assist in the retrieval of prepared statements that would be commonly queried throughout the game.</li>
    </blockquote>
    
</blockquote>
        
<h3>Windowed Application</h3>
    <p>The client will create a windowed Java Application in order to allow for greater accessiblity for the end user, eliminating the need for command line execution or running the files through an IDE. The windowed application will consist of three connected units: Graphical Output, Textual Output, and Textual Input.</p>
<blockquote>
    <h4>Graphical Output</h4>
    <blockquote>
        <li>The Graphical Output will consist of a live, cell-based map that will fill in as the user continues through his/her game.</li>
        <li>This output will utilze the Lightweight Java Gaming Library API.</li>
    </blockquote>
    <h4>Textual Output</h4>
    <blockquote>
        <li>The Textual Output will consist of menu display, room description, battle actions, dialogue, etc.</li>
        <li>This section will contain the majority of the output to align the project more into a "Text Adventure" game.</li>
        <li>The client will pass output strings to the Windowed Application in order to display the textual output in an eclosed section of the screen.</li>
    </blockquote>
    <h4>Textual Input</h4>
    <blockquote>
        <li>The user will pass input strings to the client in order to navigate their way through the game.</li>
        <li>A pre-defined list of input commands will always be available to the user in the form of a "help" option.</li>
        <li>Any of the commands in this list will allow the user to interact with the game. Examples of these may include "look," "talk," "attack," or "take."</li>
    </blockquote>
</blockquote>
<hr>
<h2 id="SystemRequirements">System Requirements Specification</h2>
<p>
In this section, you describe the services provided for the user.  
This description may use natural language, diagram, or other notation
</p>
<h3>0.0 Game Overview</h3>
    <ol>
        <li>The program will verify a connection to a database. If the connection fails, the game will not open.</li>
        <li>The above mentioned database will be stored on a remote server, rather than dependent on local files and server configuration.</li>
        <li>The program will execute as a windowed application.</li>
        <li>The program will open and check for any available save files. If a save file exists, the option to load from a save file will be available.</li>
        <li>If there is no save file available, the only selection available will be a new game.</li>
        <li>Upon starting a new game, a character will be required to be created. Dependent on decisions made during creation, it will affect the character's base stats.</li>
        <li>The program will allow text input of strings. If the string is illegal given the listed commands, it will return a help document.</li>
        <li>Upon successful command, result text will display and continue the interactions. Successful in this case is defined as a string that is contained within the listed commands.</li>
        <li>Battle sequences may contain a unique list of acceptable commands. The above two points are still accurate within battle sequences.</li>
        <li>Objects will be pulled from the database to be interacted with. This may include NPCs, items, and other objects as needed.</li>
    </ol>
<h3>1.0 Winning The Game</h3>
    <ol>
        <li>You can't. You have lost the game.</li>
        <li>A player can win the game by successfully completing all quest objectives and reaching the end of the story. Verification of successful completion will occur in real time throughout the story as it is relevant for progression.</li>
        <li>The player will not be required to traverse the entirety of the map or interact with all objects.</li>
        <li>The required objects, travel, and interaction will be detailed within the player's active quest.</li>
    </ol>
<h3>2.0 Character Creation</h3>
    <ol>
        <li>The program will first verify whether or not a character has already been created.</li>
        <li>A player controlled character must be generated. This character may be generated with specifications determined by the program or by the user, as time permits.</li>
        <li>When the character is created, it should be determined to be a different entity than a NPC and thus treated differently by NPCs.</li>
        <li>The character will have a defined class, which will affect its base stats.</li>
        <li>The character should be capable of engaging in combat, collecting items, and navigating a map. These will be expanded upon further below.</li>
    </ol>
<h3>3.0 Navigation</h3>
    <ol>
        <li>A player will have a map that can be utilized at any time to determine location. The map will be generated using built in libraries.</li>
        <li>Character should be able to move North, South, East, and West. The map will reflect these changes as they are made. The direction moved will be verified with a database to verify character is within bounds.</li>
        <li>Followup: If character is out of bounds, a generic text displaying that they are at a part of the map that is unexplorable beyond this point.</li>
        <li>When the character moves to a new cell, data about the location will be pulled and the player will receive text about this new location.</li>
        <li>If a character reaches a cell with an encounter, the battle sequence will begin. The character will need to have a successful encounter to continue investigating the cell. (See below.)</li>
    </ol>
<h3>4.0 Encounters</h3>
    <ol>
        <li>Encounters will begin by reaching a cell that contains an aggressive NPC.</li>
        <li>Encounters will verify after each successful command whether HP has reached zero for the character or NPC. When one reaches zero, battle ends.</li>
        <li>Commands will be verified and be considered succesful if they are an acceptable string. If they are accepted further validation will occur.</li>
        <li>This validation includes ensuring that other parameters the action or object requires have been met. If they have not, the action will not complete and an appropriate message will display.</li>
        <li>If the command is not an acceptable string, a help document of available commands will display.</li>
        <li>A successful encounter is defined as the character having remaining HP while all aggressive NPCs have reached zero.</li>
        <li>After a successful encounter, other options within the cell become available.</li>
    </ol>
<h3>5.0 Interacting With Environment</h3>
    <ol>
        <li>Each new cell will contain a text description. These will generate based on location and quest objective.</li>
        <li>A character can interact with the environment using text based commands. These commands will be stored and can be accessed via a help document. The help document will also appear after an unsuccessful command.</li>
        <li>After successfully entering a command, appropriate text will appear to assist the player with completing a quest. The response may vary based on location and quest objective.</li>
        <li>The game will not display messages if objects within the cell are not interacted with. It is up to the player to be thorough in their examination of the cell.</li>
        <li>Commands within a cell will include talking, taking items, and examining surroundings. Based on the objects located within the cell, appropriate responses will be pulled.</li>
    </ol>
<h3>6.0 Interacting with NPCs</h3>
    <ol>
        <li>NPCs will be categorized as either aggressive or friendly. An aggressive NPC will trigger an encounter. A friendly NPC can be spoken to and can give/take items. This will be determined by a value.</li>
        <li>Friendly NPCs will typically be the source of quests or story progression. This will be validated against the database.</li>
        <li>Friendly NPCs will be created as time permits.</li>
    </ol>
<h3>7.0 Saving A Game</h3>
    <ol>
        <li>The player will have an option to save their game progress to return at a later time.</li>
        <li>The save file will be stored locally on the player's machine. It is not up to the client or database to retain save files.</li>
        <li>The option to save the game may be in real time or after completion of quest objectives.</li>
        <li>/SAVE will be one of the acceptable string commands.</li>
    </ol><hr>
<h2 id="SystemModels">System Models</h2>

<h3 id="Model1">System Architecture Model</h3>
<p>This model outlines the high-level interactions between all parts of the System Architecture.</p>
<img src="./SRS for Team Etarium_files/System_Model.jpg" alt="System_Model">
<hr>
<h2 id="SystemEvolution">System Evolution</h2>
<p>
In this section, you describe how the system may evolve or change for the next release.
This is a good place to state features that are not implemented in the current release, 
but will be implemented in the future. 
</p>

<h3>Version 1.0.0</h3>
    <blockquote>
        <h4>Functional Skeleton utilizing overarching architecture</h4>
        <li>Live functional DB that can be called from and written to</li>
        <li>Expands upon developed prototypes</li>
    </blockquote>
<h3>Version 1.1.0</h3>
    <blockquote>
        <h4>Translating Combat Sim into Modeled Architecture</h4>
    </blockquote>

<h3>Version 1.2.0</h3>
    <blockquote>
        <h4>Relational Database Populated</h4>
    </blockquote>

<h3>Version 1.3.0</h3>
    <blockquote>
        <h4>Aggregated Grid Structure for Exploration</h4>
    </blockquote>

<h3>Version 1.4.0</h3>
    <blockquote>
        <h4>User-Database Interaction</h4>
        <li>Prepared Statements with variable input selection</li>
    </blockquote>

<h3>Version 1.5.0</h3>
    <blockquote>
        <h4>Graphical Exploratory Interface</h4>
        <li></li>
    </blockquote>

<h3>Version 1.6.0</h3>
    <blockquote>
        <h4>State Persistence</h4>
    </blockquote>

<h3>Version 1.7.0</h3>
    <blockquote>
        <h4>Remote Repository</h4>
    </blockquote><hr>
<h2 id="Appendices">Appendices</h2>
<p>
Add any other information, that is not included above, that is needed for designing the application. 
See the book for possible idea on what may be included. 
For many projects, this will be very short. 
</p>
<a href="https://www.lwjgl.org/">Lightweight Java Game Library</a><br>

<h3>A short history of the project:</h3>
    <p>
        The original idea for this project was originally drawn out in a
        previous class, Data Structures. This original idea was based off a
        similar project that Jason’s father did when he was in college, and
        these types of games were popular. That game was different then what we
        are trying to make but was none the less the inspiration for this
        project. When we started planning in Data Structures, we realized that
        the project would have been a lot more work than we originally thought,
        and fell a bit out of scope of the assignment. The project was
        eventually scrapped in favor of an individual system from the original
        project, which we were able fully flesh out and complete. This system,
        the combat system, was created under the name TheTwistingHaunt using
        GitHub for version control. The revised project fit better with that
        class and was more in scope in terms of work versus time. 
    </p>
<hr>
<h2 id="Index">Index</h2>
<p>In this section provide an index for the major parts of the specification.
My recommendation is to use hyperlinks and tags to refer to previous sections 
of the document.
</p>
<ul>
<a href="http://etarim-cs410-winona.mybluemix.net/SRS/#Model1">Model 1</a>
</ul><hr>
<h2 id="ContributionsSummary">Contributions Summary</h2>
<p>
    In this section, each member's roles and jobs will be listed.
</p>
<h3>Ben Bolin - Test Lead</h3>
    <ol>
        <li>SRS preface, introduction, and user requirements.</li>
    </ol>
<h3>Emily Clark - SRS Lead</h3>
    <ol>
        <li>SRS glossary and system requirements.</li>
    </ol>
<h3>Jason Richter - User Representative</h3>
    <ol>
        <li>SRS appendices, contributions summary, and acceptance paragraph.</li>
    </ol>
<h3>Sam Fiscus - Design Lead</h3>
    <ol>
        <li>SRS system architecture, system models, and prototype</li>
    </ol><hr>
<h2 id="AcceptanceParagraph">Acceptance Paragraph</h2>
<p>As the user representative, I played the original game that this project is
based off, and so far, this project’s goals and requirements remain faithful to
it’s inspiration while remaining different enough to be mechanically different
from it. For base goals for a first release, simply having the systems which
the game will be built on would be acceptable for a first release. Specifically,
having the database created and the systems which run game functions complete.
I am excited to see if we can get any of our advanced goals completed,
such as online functionality, as this was included in the inspiration game, and
it made it very entertaining. All that said, the base requirements work well and
I am looking forward to working with development and watching the project 
evolve.
</p>
<p>-Jason Richter, User Representative</p><hr>
<h2 id="DesignAssignments">Design Assignments</h2>
<img src="./SRS for Team Etarium_files/picture.jpg" alt="Brainstorming">	
<hr>

<p>This section intentionally left blank. </p> 
<pre>




















































</pre>
<p>END OF THE DOCUMENT</p>
<hr>



</body></html>